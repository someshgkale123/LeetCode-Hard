Problem Statement:

There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
You may assume nums1 and nums2 cannot be both empty.

Example 1:
nums1 = [1, 3]
nums2 = [2]
The median is 2.0

Example 2:
nums1 = [1, 2]
nums2 = [3, 4]
The median is (2 + 3)/2 = 2.5

Solution:

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        num=sorted(nums1+nums2)
        length=len(num)
        i=length//2
        if length%2==0:
            return((num[i]+num[i-1])/2)
        else:
            return(num[i])
        
        ########### O(log(m+n)); O(1)
        
        n=len(nums1)
        m=len(nums2)
        half=(n+m)//2
        
#         if not n:
#             mid=m//2
#             return (nums2[mid]+nums2[mid-1])//2 if m%2==0 else nums2[mid]
        
#         if not m:
#             mid=n//2
#             return (nums1[mid]+nums1[mid-1])//2 if n%2==0 else nums1[mid]
        
        if len(nums1)>len(nums2):
            nums1,nums2=nums2,nums1
        
        left=0
        right=len(nums1)-1
        while True:
            Amid=(left+right)//2
            Bmid=half-Amid-2
            
            Aleft=nums1[Amid] if Amid>=0 else float("-inf")
            Bleft=nums2[Bmid] if Bmid>=0 else float("-inf")
            
            Aright=nums1[Amid+1] if Amid+1<len(nums1) else float("inf")
            Bright=nums2[Bmid+1] if Bmid+1<len(nums2) else float("inf")
            
            if Aleft<=Bright and Bleft<=Aright:
                if (n+m)%2==0:
                    return (max(Aleft,Bleft)+min(Aright,Bright))/2
                else:
                    return min(Aright,Bright)
                
            elif Aleft>Bright:
                right=Amid-1
                
            else:
                left=Amid+1
                
