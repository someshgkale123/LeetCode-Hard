Problem Statement:

We run a preorder depth first search on the root of a binary tree.
At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  (If the depth of a node is D, the depth of its immediate child is D+1.  The depth of the root node is 0.)
If a node has only one child, that child is guaranteed to be the left child.
Given the output S of this traversal, recover the tree and return its root.

Example 1:
Input: "1-2--3--4-5--6--7"
Output: [1,2,5,3,4,6,7]

Example 2:
Input: "1-2--3---4-5--6---7"
Output: [1,2,5,3,null,6,null,4,null,7]
 
Example 3:
Input: "1-401--349---90--88"
Output: [1,401,null,349,88,90]


SOlution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def recoverFromPreorder(self, S: str) -> TreeNode:
        """Tree=TreeNode(int(S[0]))
        def dfs(node,order,depth):
            if not node:
                return 
            cnt=0
            temp=0
            index=0
            for i in range(len(order)):        
                if order[i]=="-":
                    cnt+=1
                else:
                    temp=int(order[i])
                    break
                index+=1
            print(node,order,cnt,depth)
            if cnt-1==depth:
                if node.left:
                    node.right=TreeNode(temp)
                    dfs(node.right,order[index+1:],cnt)
                    
                else:
                    node.left=TreeNode(temp)
                    dfs(node.left,order[index+1:],cnt)
            else:
                return 
        dfs(Tree,S[1:],0)
        """
        ####### O(N);O(N)
        li=[]
        temp=0
        S=S.split("-")
        for i in S:
            if i.isdigit():
                li.append((int(i),temp+1))
                temp=0
            else:
                temp+=1
        #print(li)
        
        stack=[(TreeNode(int(S[0])),0)]
        for i in range(1,len(li)):
            curr,currdepth=li[i]
            
            while currdepth-1!=stack[-1][1]:
                stack.pop()
            node=TreeNode(curr) 
            if stack[-1][0].left:
                stack[-1][0].right=node
            else:
                stack[-1][0].left=node
            stack.append((node,currdepth))
        
        while stack:
            node,depth=stack.pop()
        return(node)
        

