Problem Statement:

Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Note:
s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.

Example 1:
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:
Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.

Example 3:
Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

Example 4:
Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".

Example 5:
Input:
s = "acdcb"
p = "a*c?b"
Output: false



Solution:
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        """
        ### Backtrack
        empty=p.replace("*","")
       
        if not s and not empty or empty==s:
            return True
        if not p:
            return False
        
        self.ans=False
        def backtrack(sstart,pstart,temp):
            if temp==s and sstart>=len(s) and pstart>=len(p):
                print(temp)
                self.ans=True
                return
            if (sstart>=len(s) and pstart<len(p)) or (sstart<len(s) and pstart>=len(p)):
                return

            
            
            if s[sstart]==p[pstart] or p[pstart]=="?":
                backtrack(sstart+1,pstart+1,temp+s[sstart])
            elif p[pstart]=="*":
                for i in range(len(s)+1):
                    backtrack(sstart+i,pstart+1,temp+s[sstart:sstart+i])

        
        backtrack(0,0,"")
        return self.ans
        """
        # O(mn); O(mn), the space complexity can be reduced to n
        
        dp=[[0 for i in range(len(p)+1)] for j in range(len(s)+1)]
        dp[0][0]=1
        for i in range(1,len(dp[0])):
            if p[i-1]=="*":
                dp[0][i]=dp[0][i-1]
                
   
        for i in range(1,len(dp)):
            for j in range(1,len(dp[0])):
                if s[i-1]==p[j-1] or p[j-1]=="?":
                    dp[i][j]=dp[i-1][j-1]
                elif p[j-1]=="*":
                    dp[i][j]=dp[i-1][j] | dp[i][j-1]
                else:
                    dp[i][j]=0
        #print(dp)
        return dp[-1][-1]
