Problem Statement:

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Follow up:
Could you solve the problem in O(1) extra memory space?
You may not alter the values in the list's nodes, only nodes itself may be changed.
 
Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Example 3:
Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]

Example 4:
Input: head = [1], k = 1
Output: [1]


Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        ###### O(N);O(1)
        
        # initialize ans pointer
        ans=None
        
        # get length of list
        Total=0
        temp=head
        while temp:
            Total+=1
            temp=temp.next
        
        # check for k partitions possible
        partitions=Total//k
        
        # set a start pointer for each partitions
        dummy=head
        while partitions:
            # reverse each partitions till count becomes equal to k
            cnt=0
            temp=ListNode(-1)
            start=head
            orgstart=start
            while start:
                cnt+=1
                nxt=start.next
                start.next=temp
                temp=start
                start=nxt
                
                # if cnt becomes equal to k
                if cnt==k:
                    
                    #check if first parition start is set or not
                    if not ans:
                        ans=temp
                    
                    # else attach previous partition start(viz. end pointer after reversing) to start pointer of next parition and update the pointer
                    else:
                        dummy.next=temp
                        dummy=orgstart
                    
                    # update the head for next partition in line, decrement partitions
                    head=nxt
                    partitions-=1
                    break
        
        # check if any nodes available (which cannot form a partition)
        if head:
            dummy.next=head
        else:
            dummy.next=None
        return ans            
        
