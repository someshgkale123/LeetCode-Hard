Problem Statement:

Design a data structure that supports all following operations in average O(1) time.
Note: Duplicate elements are allowed.
insert(val): Inserts an item val to the collection.
remove(val): Removes an item val from the collection if present.
getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.
Example:

// Init an empty collection.
RandomizedCollection collection = new RandomizedCollection();

// Inserts 1 to the collection. Returns true as the collection did not contain 1.
collection.insert(1);

// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
collection.insert(1);

// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
collection.insert(2);

// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
collection.getRandom();

// Removes 1 from the collection, returns true. Collection now contains [1,2].
collection.remove(1);

// getRandom should return 1 and 2 both equally likely.
collection.getRandom();


Solution:
########################### Using set functions O(1)
class RandomizedCollection:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dict=collections.defaultdict(set)
        self.li=[]

    def insert(self, val: int) -> bool:
        """
        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.
        """
        if val not in self.dict:
            self.li.append(val)
            self.dict[val].add(len(self.li)-1)
            print(self.dict)
            return True
        else:
            self.li.append(val)
            self.dict[val].add(len(self.li)-1)
            print(self.dict)
            return False
        
    def remove(self, val: int) -> bool:
        """
        Removes a value from the collection. Returns true if the collection contained the specified element.
        """
        if val in self.dict:
            indx=self.dict[val].pop()
            lastelem=self.li[-1]
            self.li[indx]=lastelem
            self.dict[lastelem].add(indx)
            self.dict[lastelem].discard(len(self.li)-1)
            if not self.dict[val]:
                del self.dict[val]
            self.li.pop()
            print(self.dict)
            return True
        else:
            return False
        
    def getRandom(self) -> int:
        """
        Get a random element from the collection.
        """
        return choice(self.li)
        


# Your RandomizedCollection object will be instantiated and called as such:
# obj = RandomizedCollection()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()

############################### Using Sorted
class RandomizedCollection:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dict=collections.defaultdict(list)
        self.li=[]

    def insert(self, val: int) -> bool:
        """
        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.
        """
        if val not in self.dict:
            self.li.append(val)
            self.dict[val].append(len(self.li)-1)
            #print(self.dict)
            return True
        else:
            self.li.append(val)
            self.dict[val].append(len(self.li)-1)
            #print(self.dict)
            return False
        
    def remove(self, val: int) -> bool:
        """
        Removes a value from the collection. Returns true if the collection contained the specified element.
        """
        if val in self.dict:
            indx=self.dict[val][0]
            lastelem=self.li[-1]
            self.li[-1],self.li[indx]=self.li[indx],self.li[-1]
            self.dict[lastelem]=sorted([indx]+self.dict[lastelem][:-1])
            self.dict[val]=self.dict[val][1:]
            if not self.dict[val]:
                del self.dict[val]
            self.li.pop()
            #print(self.dict)
            return True
        else:
            return False
        
    def getRandom(self) -> int:
        """
        Get a random element from the collection.
        """
        return choice(self.li)
        


# Your RandomizedCollection object will be instantiated and called as such:
# obj = RandomizedCollection()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
