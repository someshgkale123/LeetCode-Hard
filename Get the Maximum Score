Problem Statement:

You are given two sorted arrays of distinct integers nums1 and nums2.
A valid path is defined as follows:
Choose array nums1 or nums2 to traverse (from index-0).
Traverse the current array from left to right.
If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).
Score is defined as the sum of uniques values in a valid path.

Return the maximum score you can obtain of all possible valid paths.
Since the answer may be too large, return it modulo 10^9 + 7.

Example 1:
Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
Output: 30
Explanation: Valid paths:
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)
The maximum is obtained with the path in green [2,4,6,8,10].

Example 2:
Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]
Output: 109
Explanation: Maximum sum is obtained with the path [1,3,5,100].

Example 3:
Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
Output: 40
Explanation: There are no common elements between nums1 and nums2.
Maximum sum is obtained with the path [6,7,8,9,10].

Example 4:
Input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]
Output: 61
 
 
SOlution:
class Solution:
    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:
        
        ######## O(max(n,m)); O(min(n,m))
        
        # get similar elements from nums1 and nums2
        similar=set(nums1)&set(nums2)
        
        # intialize pointer at the end of both arrays
        idx1,idx2=0,0
        num1=len(nums1)-1
        num2=len(nums2)-1
        
        while num1>=0 and num2>=0:
            # print(idx1,idx2)
            
            # if both pointers have same elements, get max sum from previously computed and add current element
            if nums1[num1]==nums2[num2]:
                idx2=idx1=nums1[num1]+max(idx1,idx2)
                num1-=1
                num2-=1
            
            # decrement pointers till similar element
            else:
                # if num1 pointer don't hold similar element, decrement num1 pointer and add current element to idx1 sum
                while num1>=0 and nums1[num1] not in similar:
                    idx1+=nums1[num1]
                    num1-=1
                
                # if num2 pointer don't hold similar element, decrement num2 pointer and add current element to idx2 sum
                while num2>=0 and nums2[num2] not in similar:
                    idx2+=nums2[num2]
                    num2-=1
                    
        # if length of both arrays are not similar, get extra elements from max length array
        while num1>=0:
            idx1+=nums1[num1]
            num1-=1
            
        while num2>=0:
            idx2+=nums2[num2]
            num2-=1
            
        return max(idx1,idx2)%((10**9)+7)
                
            
